import{a as v,_ as P}from"./client-CGfhZtnq.js";const s={RSC_START:0,RSC_CHUNK:1,RSC_END:2,ACTION_REQUEST:3,ACTION_RESPONSE:4,ACTION_ERROR:5,ACTION_CHUNK:6,ACTION_END:7},W="default",$=({key:O=W})=>C=>{let e=null,l=!1;const b=crypto.randomUUID(),R=new URL(window.location.href);R.protocol="",R.host="";const g=()=>{if(e)return;const y="wss";e=new WebSocket(`${y}://${window.location.host}/__realtime?key=${encodeURIComponent(O)}&url=${encodeURIComponent(R.toString())}&clientId=${encodeURIComponent(b)}`),e.binaryType="arraybuffer",e.addEventListener("open",()=>{l=!0}),e.addEventListener("error",o=>{console.error("[Realtime] WebSocket error",o)}),e.addEventListener("message",o=>{const t=new Uint8Array(o.data);if(t[0]===s.RSC_START){const i=new TextDecoder,m=i.decode(t.slice(1,37)),w=new ReadableStream({start(a){e.addEventListener("message",function c(d){const n=new Uint8Array(d.data),E=n[0];if(i.decode(n.slice(1,37))!==m)return;const r=n.slice(37);E===s.RSC_CHUNK?a.enqueue(r):E===s.RSC_END&&(a.close(),e.removeEventListener("message",c))})}}),f=v.createFromReadableStream(w,{callServer:u});C.setRscPayload(f)}}),e.addEventListener("close",()=>{console.warn("[Realtime] WebSocket closed, attempting to reconnect..."),e=null,l=!1,setTimeout(g,5e3)})},L=()=>{if(!e&&l)throw new Error("Inconsistent state: WebSocket is null but marked as connected");if(!e||!l)throw new Error("WebSocket is not connected");return e},u=async(y,o)=>{try{const t=L(),{encodeReply:U}=await P(async()=>{const{encodeReply:d}=await import("./client-CGfhZtnq.js").then(n=>n.c);return{encodeReply:d}},[]),i=o!=null?await U(o):null,m=crypto.randomUUID(),w=JSON.stringify({id:y,args:i,requestId:m}),a=new TextEncoder().encode(w),c=new Uint8Array(a.length+1);return c[0]=s.ACTION_REQUEST,c.set(a,1),t.send(c),new Promise(async(d,n)=>{const E=new ReadableStream({start(r){const p=D=>{const T=new Uint8Array(D.data),_=T[0],N=new TextDecoder;if(N.decode(T.slice(1,37))!==m)return;const A=T.slice(37);if(_===s.ACTION_CHUNK)r.enqueue(A);else if(_===s.ACTION_END)r.close(),t.removeEventListener("message",p);else if(_===s.ACTION_ERROR){const h=N.decode(A);let I="Unknown error";try{I=JSON.parse(h).error||I}catch{}r.error(new Error(I)),t.removeEventListener("message",p)}};t.addEventListener("message",p)}}),S=v.createFromReadableStream(E,{callServer:u});C.setRscPayload(S);try{const r=await S;d(r.actionResult)}catch(r){n(r)}})}catch(t){return console.error("[Realtime] Error calling server",t),null}};return g(),u};export{$ as realtimeTransport};
//# sourceMappingURL=client-C49bht95.js.map
