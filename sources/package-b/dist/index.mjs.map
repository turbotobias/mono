{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import * as v from 'valibot';\n\nexport const BigintSchema: v.BigintSchema<undefined> = v.bigint(); // bigint\nexport const BooleanSchema: v.BooleanSchema<undefined> = v.boolean(); // boolean\nexport const NullSchema: v.NullSchema<undefined> = v.null(); // null\nexport const NumberSchema: v.NumberSchema<undefined> = v.number(); // number\nexport const StringSchema: v.StringSchema<undefined> = v.string(); // string\nexport const SymbolSchema: v.SymbolSchema<undefined> = v.symbol(); // symbol\nexport const UndefinedSchema: v.UndefinedSchema<undefined> = v.undefined(); // undefined\n\nexport const ArraySchema: v.ArraySchema<v.StringSchema<undefined>, undefined> = v.array(v.string()); // string[]\nexport const BlobSchema: v.BlobSchema<undefined> = v.blob(); // Blob\nexport const DateSchema: v.DateSchema<undefined> = v.date(); // Date\nexport const FileSchema: v.FileSchema<undefined> = v.file(); // File\nexport const FunctionSchema: v.FunctionSchema<undefined> = v.function(); // (...args: unknown[]) => unknown\nexport const LooseObjectSchema: v.LooseObjectSchema<{\n  readonly key: v.StringSchema<undefined>;\n}, undefined> = v.looseObject({ key: v.string() }); // { key: string }\nexport const LooseTupleSchema: v.LooseTupleSchema<[v.StringSchema<undefined>, v.NumberSchema<undefined>], undefined> = v.looseTuple([v.string(), v.number()]); // [string, number]\nexport const MapSchema: v.MapSchema<v.StringSchema<undefined>, v.NumberSchema<undefined>, undefined> = v.map(v.string(), v.number()); // Map<string, number>\nexport const ObjectSchema: v.ObjectSchema<{\n  readonly key: v.StringSchema<undefined>;\n}, undefined> = v.object({ key: v.string() }); // { key: string }\nexport const ObjectWithRestSchema: v.ObjectWithRestSchema<{\n  readonly key: v.StringSchema<undefined>;\n}, v.NullSchema<undefined>, undefined> = v.objectWithRest({ key: v.string() }, v.null()); // { key: string } & { [key: string]: null }\nexport const PromiseSchema: v.PromiseSchema<undefined> = v.promise(); // Promise<unknown>\nexport const RecordSchema: v.RecordSchema<v.StringSchema<undefined>, v.NumberSchema<undefined>, undefined> = v.record(v.string(), v.number()); // Record<string, number>\nexport const SetSchema: v.SetSchema<v.NumberSchema<undefined>, undefined> = v.set(v.number()); // Set<number>\nexport const StrictObjectSchema: v.StrictObjectSchema<{\n  readonly key: v.StringSchema<undefined>;\n}, undefined> = v.strictObject({ key: v.string() }); // { key: string }\nexport const StrictTupleSchema: v.StrictTupleSchema<[v.StringSchema<undefined>, v.NumberSchema<undefined>], undefined> = v.strictTuple([v.string(), v.number()]); // [string, number]\nexport const TupleSchema: v.TupleSchema<[v.StringSchema<undefined>, v.NumberSchema<undefined>], undefined> = v.tuple([v.string(), v.number()]); // [string, number]\nexport const TupleWithRestSchema: v.TupleWithRestSchema<[v.StringSchema<undefined>, v.NumberSchema<undefined>], v.NullSchema<undefined>, undefined> = v.tupleWithRest([v.string(), v.number()], v.null()); // [string, number, ...null[]]\n\n\nexport const UsernameSchema: v.SchemaWithPipe<readonly [v.StringSchema<undefined>, v.RegexAction<string, undefined>, v.TitleAction<string, \"Username\">, v.DescriptionAction<string, \"A username must be between 4 and 16 characters long and can only contain letters, numbers, underscores and hyphens.\">]> = v.pipe(\n  v.string(),\n  v.regex(/^[a-z0-9_-]{4,16}$/iu),\n  v.title('Username'),\n  v.description(\n    'A username must be between 4 and 16 characters long and can only contain letters, numbers, underscores and hyphens.'\n  )\n);"
  ],
  "mappings": ";AAAA;AAEO,IAAM,eAA4C,SAAO;AACzD,IAAM,gBAA8C,UAAQ;AAC5D,IAAM,aAAwC,OAAK;AACnD,IAAM,eAA4C,SAAO;AACzD,IAAM,eAA4C,SAAO;AACzD,IAAM,eAA4C,SAAO;AACzD,IAAM,kBAAkD,YAAU;AAElE,IAAM,cAAqE,QAAQ,SAAO,CAAC;AAC3F,IAAM,aAAwC,OAAK;AACnD,IAAM,aAAwC,OAAK;AACnD,IAAM,aAAwC,OAAK;AACnD,IAAM,iBAAgD,WAAS;AAC/D,IAAM,oBAEK,cAAY,EAAE,KAAO,SAAO,EAAE,CAAC;AAC1C,IAAM,mBAA4G,aAAW,CAAG,SAAO,GAAK,SAAO,CAAC,CAAC;AACrJ,IAAM,YAA4F,MAAM,SAAO,GAAK,SAAO,CAAC;AAC5H,IAAM,eAEK,SAAO,EAAE,KAAO,SAAO,EAAE,CAAC;AACrC,IAAM,uBAE8B,iBAAe,EAAE,KAAO,SAAO,EAAE,GAAK,OAAK,CAAC;AAChF,IAAM,gBAA8C,UAAQ;AAC5D,IAAM,eAAkG,SAAS,SAAO,GAAK,SAAO,CAAC;AACrI,IAAM,YAAiE,MAAM,SAAO,CAAC;AACrF,IAAM,qBAEK,eAAa,EAAE,KAAO,SAAO,EAAE,CAAC;AAC3C,IAAM,oBAA8G,cAAY,CAAG,SAAO,GAAK,SAAO,CAAC,CAAC;AACxJ,IAAM,cAAkG,QAAM,CAAG,SAAO,GAAK,SAAO,CAAC,CAAC;AACtI,IAAM,sBAA2I,gBAAc,CAAG,SAAO,GAAK,SAAO,CAAC,GAAK,OAAK,CAAC;AAGjM,IAAM,iBAAoS,OAC7S,SAAO,GACP,QAAM,sBAAsB,GAC5B,QAAM,UAAU,GAChB,cACA,qHACF,CACF;",
  "debugId": "53D375A7225F68CE64756E2164756E21",
  "names": []
}